// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(MarketContext))]
    [Migration("20210425150816_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_category")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdCategory")
                        .HasName("PK_Categoria");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DAL.Delivery", b =>
                {
                    b.Property<int>("IdDelivery")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_delivery")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfDelivery")
                        .HasColumnName("date_of_delivery")
                        .HasColumnType("datetime");

                    b.HasKey("IdDelivery")
                        .HasName("PK_Postavka");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("DAL.DeliveryLine", b =>
                {
                    b.Property<int>("IdDeliveryLine")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_delivery_line")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountOfProduct")
                        .HasColumnName("count_of_product");

                    b.Property<DateTime>("DateOfPreparing")
                        .HasColumnName("date_of_preparing")
                        .HasColumnType("datetime");

                    b.Property<bool>("Debited")
                        .HasColumnName("debited");

                    b.Property<int>("IdDeliveryFk")
                        .HasColumnName("id_delivery_FK");

                    b.Property<int>("IdProductFk")
                        .HasColumnName("id_product_FK");

                    b.Property<decimal>("OwnCost")
                        .HasColumnName("own_cost")
                        .HasColumnType("money");

                    b.Property<int>("RemainingProduct")
                        .HasColumnName("remaining_product");

                    b.HasKey("IdDeliveryLine")
                        .HasName("PK_Line_of_postavka");

                    b.HasIndex("IdDeliveryFk");

                    b.HasIndex("IdProductFk");

                    b.ToTable("Delivery_line");
                });

            modelBuilder.Entity("DAL.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_order")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnName("date_and_time")
                        .HasColumnType("datetime");

                    b.Property<string>("IdUserFk");

                    b.Property<decimal>("TotalCost")
                        .HasColumnName("total_cost")
                        .HasColumnType("money");

                    b.HasKey("IdOrder")
                        .HasName("PK_Check");

                    b.HasIndex("IdUserFk");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DAL.OrderLine", b =>
                {
                    b.Property<int>("IdOrderLine")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_order_line")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CostForBuyer")
                        .HasColumnName("cost_for_buyer")
                        .HasColumnType("money");

                    b.Property<int>("IdOrderFk")
                        .HasColumnName("id_order_FK");

                    b.Property<int>("IdProductFk")
                        .HasColumnName("id_product_FK");

                    b.Property<int>("MuchOfProducts")
                        .HasColumnName("much_of_products");

                    b.HasKey("IdOrderLine")
                        .HasName("PK_Line_of_check");

                    b.HasIndex("IdOrderFk");

                    b.HasIndex("IdProductFk");

                    b.ToTable("Order_line");
                });

            modelBuilder.Entity("DAL.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_product")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCategoryFk")
                        .HasColumnName("id_category_FK");

                    b.Property<decimal>("NowCost")
                        .HasColumnName("now_cost")
                        .HasColumnType("money");

                    b.Property<int?>("ScorGodnostiO")
                        .HasColumnName("scor_godnosti_O");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdProduct");

                    b.HasIndex("IdCategoryFk");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("DAL.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.DeliveryLine", b =>
                {
                    b.HasOne("DAL.Delivery", "IdDeliveryFkNavigation")
                        .WithMany("DeliveryLine")
                        .HasForeignKey("IdDeliveryFk")
                        .HasConstraintName("FK_Delivery_line_Delivery");

                    b.HasOne("DAL.Product", "IdProductFkNavigation")
                        .WithMany("DeliveryLine")
                        .HasForeignKey("IdProductFk")
                        .HasConstraintName("FK_Delivery_line_Product");
                });

            modelBuilder.Entity("DAL.Order", b =>
                {
                    b.HasOne("DAL.User", "IdUserFkNavigation")
                        .WithMany("Order")
                        .HasForeignKey("IdUserFk")
                        .HasConstraintName("FK_Check_User");
                });

            modelBuilder.Entity("DAL.OrderLine", b =>
                {
                    b.HasOne("DAL.Order", "IdOrderFkNavigation")
                        .WithMany("OrderLine")
                        .HasForeignKey("IdOrderFk")
                        .HasConstraintName("FK_Order_line_Order");

                    b.HasOne("DAL.Product", "IdProductFkNavigation")
                        .WithMany("OrderLine")
                        .HasForeignKey("IdProductFk")
                        .HasConstraintName("FK_Order_line_Product");
                });

            modelBuilder.Entity("DAL.Product", b =>
                {
                    b.HasOne("DAL.Category", "IdCategoryFkNavigation")
                        .WithMany("Product")
                        .HasForeignKey("IdCategoryFk")
                        .HasConstraintName("FK_Product_Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
